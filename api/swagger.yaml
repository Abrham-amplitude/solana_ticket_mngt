openapi: 3.0.0
info:
  title: Ticket Management System API
  description: API for managing tickets on Solana blockchain
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Development server
  # - url: https://api.devnet.example.com
  #   description: Devnet server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        error:
          type: string
          example: Detailed error description

    Event:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Concert Event"
        categories:
          type: array
          items:
            type: string
          example: ["music", "live"]
        location:
          type: object
          properties:
            type:
              type: string
              example: "Point"
            coordinates:
              type: array
              items:
                type: number
              example: [0, 0]
        media:
          type: string
          example: "event-image.jpg"
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    Ticket:
      type: object
      properties:
        ticketAddress:
          type: string
          example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
        owner:
          type: string
          example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
        metadata:
          type: object
          properties:
            name:
              type: string
              example: "VIP Concert Ticket"
            description:
              type: string
              example: "VIP access to main concert"
            attributes:
              type: array
              items:
                type: object
                properties:
                  trait_type:
                    type: string
                  value:
                    type: string
        price:
          type: string
          example: "100000000"

    Transaction:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        amount:
          type: number
          example: 100000000
        type:
          type: string
          enum: [MINT, TRANSFER, RESELL]
        eventId:
          type: string
          example: "507f1f77bcf86cd799439011"
        ticketAddress:
          type: string
          example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
        signature:
          type: string
          example: "5Netfdf3..."
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

paths:
  /auth/signup:
    post:
      summary: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "testuser"
                password:
                  type: string
                  example: "testpass"
                email:
                  type: string
                  format: email
                  example: "test@example.com"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: Login to get access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "testuser"
                password:
                  type: string
                  example: "testpass"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIs..."
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/events:
    get:
      summary: Get list of events
      tags:
        - Events
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of events to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /v1/event:
    post:
      summary: Create new event
      tags:
        - Events
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Concert Event"
                categories:
                  type: array
                  items:
                    type: string
                  example: ["music"]
                location:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "Point"
                    coordinates:
                      type: array
                      items:
                        type: number
                      example: [0, 0]
                media:
                  type: string
                  example: "event-image.jpg"
      responses:
        "200":
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /v1/tickets/mint:
    post:
      summary: Mint new ticket
      tags:
        - Tickets
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                ticketData:
                  type: object
                  properties:
                    ticketType:
                      type: string
                      example: "VIP"
                    seatNumber:
                      type: string
                      example: "A1"
                    price:
                      type: number
                      example: 100000000
      responses:
        "200":
          description: Ticket minted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      ticketAddress:
                        type: string
                        example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
                      signature:
                        type: string
                        example: "5Netfdf3..."

  /v1/tickets/{address}:
    get:
      summary: Get ticket details
      tags:
        - Tickets
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Ticket address on Solana blockchain
      responses:
        "200":
          description: Ticket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Ticket"

  /v1/tickets/{address}/list:
    post:
      summary: List ticket for resale
      tags:
        - Tickets
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Ticket address on Solana blockchain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  example: 150000000
      responses:
        "200":
          description: Ticket listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      signature:
                        type: string
                        example: "5Netfdf3..."

  /v1/tickets/{address}/transfer:
    post:
      summary: Transfer ticket to new owner
      tags:
        - Tickets
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: Ticket address on Solana blockchain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newOwner:
                  type: string
                  example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
                buyerSecretKey:
                  type: string
                  example: "224,21,183,39,..."
      responses:
        "200":
          description: Ticket transferred successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      signature:
                        type: string
                        example: "5Netfdf3..."
                      newOwner:
                        type: string
                        example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
                      buyerPublicKey:
                        type: string
                        example: "7cX157TUpYi9MA3T8n2PrjVKeywzx8NX3SLfJVh11jup"
